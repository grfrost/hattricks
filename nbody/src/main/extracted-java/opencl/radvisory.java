// Generated by jextract

package opencl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct radvisory {
 *     off_t ra_offset;
 *     int ra_count;
 * }
 * }
 */
public class radvisory {

    radvisory() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        opencl_h.C_LONG_LONG.withName("ra_offset"),
        opencl_h.C_INT.withName("ra_count"),
        MemoryLayout.paddingLayout(4)
    ).withName("radvisory");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong ra_offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ra_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * off_t ra_offset
     * }
     */
    public static final OfLong ra_offset$layout() {
        return ra_offset$LAYOUT;
    }

    private static final long ra_offset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * off_t ra_offset
     * }
     */
    public static final long ra_offset$offset() {
        return ra_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * off_t ra_offset
     * }
     */
    public static long ra_offset(MemorySegment struct) {
        return struct.get(ra_offset$LAYOUT, ra_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * off_t ra_offset
     * }
     */
    public static void ra_offset(MemorySegment struct, long fieldValue) {
        struct.set(ra_offset$LAYOUT, ra_offset$OFFSET, fieldValue);
    }

    private static final OfInt ra_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ra_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ra_count
     * }
     */
    public static final OfInt ra_count$layout() {
        return ra_count$LAYOUT;
    }

    private static final long ra_count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ra_count
     * }
     */
    public static final long ra_count$offset() {
        return ra_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ra_count
     * }
     */
    public static int ra_count(MemorySegment struct) {
        return struct.get(ra_count$LAYOUT, ra_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ra_count
     * }
     */
    public static void ra_count(MemorySegment struct, int fieldValue) {
        struct.set(ra_count$LAYOUT, ra_count$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

