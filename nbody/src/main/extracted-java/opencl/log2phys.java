// Generated by jextract

package opencl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct log2phys {
 *     unsigned int l2p_flags;
 *     off_t l2p_contigbytes;
 *     off_t l2p_devoffset;
 * }
 * }
 */
public class log2phys {

    log2phys() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        opencl_h.C_INT.withName("l2p_flags"),
        opencl_h.align(opencl_h.C_LONG_LONG, 4).withName("l2p_contigbytes"),
        opencl_h.align(opencl_h.C_LONG_LONG, 4).withName("l2p_devoffset")
    ).withName("log2phys");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt l2p_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("l2p_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int l2p_flags
     * }
     */
    public static final OfInt l2p_flags$layout() {
        return l2p_flags$LAYOUT;
    }

    private static final long l2p_flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int l2p_flags
     * }
     */
    public static final long l2p_flags$offset() {
        return l2p_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int l2p_flags
     * }
     */
    public static int l2p_flags(MemorySegment struct) {
        return struct.get(l2p_flags$LAYOUT, l2p_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int l2p_flags
     * }
     */
    public static void l2p_flags(MemorySegment struct, int fieldValue) {
        struct.set(l2p_flags$LAYOUT, l2p_flags$OFFSET, fieldValue);
    }

    private static final OfLong l2p_contigbytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("l2p_contigbytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * off_t l2p_contigbytes
     * }
     */
    public static final OfLong l2p_contigbytes$layout() {
        return l2p_contigbytes$LAYOUT;
    }

    private static final long l2p_contigbytes$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * off_t l2p_contigbytes
     * }
     */
    public static final long l2p_contigbytes$offset() {
        return l2p_contigbytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * off_t l2p_contigbytes
     * }
     */
    public static long l2p_contigbytes(MemorySegment struct) {
        return struct.get(l2p_contigbytes$LAYOUT, l2p_contigbytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * off_t l2p_contigbytes
     * }
     */
    public static void l2p_contigbytes(MemorySegment struct, long fieldValue) {
        struct.set(l2p_contigbytes$LAYOUT, l2p_contigbytes$OFFSET, fieldValue);
    }

    private static final OfLong l2p_devoffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("l2p_devoffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * off_t l2p_devoffset
     * }
     */
    public static final OfLong l2p_devoffset$layout() {
        return l2p_devoffset$LAYOUT;
    }

    private static final long l2p_devoffset$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * off_t l2p_devoffset
     * }
     */
    public static final long l2p_devoffset$offset() {
        return l2p_devoffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * off_t l2p_devoffset
     * }
     */
    public static long l2p_devoffset(MemorySegment struct) {
        return struct.get(l2p_devoffset$LAYOUT, l2p_devoffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * off_t l2p_devoffset
     * }
     */
    public static void l2p_devoffset(MemorySegment struct, long fieldValue) {
        struct.set(l2p_devoffset$LAYOUT, l2p_devoffset$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

