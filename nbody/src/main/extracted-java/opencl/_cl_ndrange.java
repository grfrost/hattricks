// Generated by jextract

package opencl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _cl_ndrange {
 *     size_t work_dim;
 *     size_t global_work_offset[3];
 *     size_t global_work_size[3];
 *     size_t local_work_size[3];
 * }
 * }
 */
public class _cl_ndrange {

    _cl_ndrange() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        opencl_h.C_LONG.withName("work_dim"),
        MemoryLayout.sequenceLayout(3, opencl_h.C_LONG).withName("global_work_offset"),
        MemoryLayout.sequenceLayout(3, opencl_h.C_LONG).withName("global_work_size"),
        MemoryLayout.sequenceLayout(3, opencl_h.C_LONG).withName("local_work_size")
    ).withName("_cl_ndrange");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong work_dim$LAYOUT = (OfLong)$LAYOUT.select(groupElement("work_dim"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t work_dim
     * }
     */
    public static final OfLong work_dim$layout() {
        return work_dim$LAYOUT;
    }

    private static final long work_dim$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t work_dim
     * }
     */
    public static final long work_dim$offset() {
        return work_dim$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t work_dim
     * }
     */
    public static long work_dim(MemorySegment struct) {
        return struct.get(work_dim$LAYOUT, work_dim$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t work_dim
     * }
     */
    public static void work_dim(MemorySegment struct, long fieldValue) {
        struct.set(work_dim$LAYOUT, work_dim$OFFSET, fieldValue);
    }

    private static final SequenceLayout global_work_offset$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("global_work_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t global_work_offset[3]
     * }
     */
    public static final SequenceLayout global_work_offset$layout() {
        return global_work_offset$LAYOUT;
    }

    private static final long global_work_offset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t global_work_offset[3]
     * }
     */
    public static final long global_work_offset$offset() {
        return global_work_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t global_work_offset[3]
     * }
     */
    public static MemorySegment global_work_offset(MemorySegment struct) {
        return struct.asSlice(global_work_offset$OFFSET, global_work_offset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t global_work_offset[3]
     * }
     */
    public static void global_work_offset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, global_work_offset$OFFSET, global_work_offset$LAYOUT.byteSize());
    }

    private static long[] global_work_offset$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * size_t global_work_offset[3]
     * }
     */
    public static long[] global_work_offset$dimensions() {
        return global_work_offset$DIMS;
    }
    private static final VarHandle global_work_offset$ELEM_HANDLE = global_work_offset$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * size_t global_work_offset[3]
     * }
     */
    public static long global_work_offset(MemorySegment struct, long index0) {
        return (long)global_work_offset$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * size_t global_work_offset[3]
     * }
     */
    public static void global_work_offset(MemorySegment struct, long index0, long fieldValue) {
        global_work_offset$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout global_work_size$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("global_work_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t global_work_size[3]
     * }
     */
    public static final SequenceLayout global_work_size$layout() {
        return global_work_size$LAYOUT;
    }

    private static final long global_work_size$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t global_work_size[3]
     * }
     */
    public static final long global_work_size$offset() {
        return global_work_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t global_work_size[3]
     * }
     */
    public static MemorySegment global_work_size(MemorySegment struct) {
        return struct.asSlice(global_work_size$OFFSET, global_work_size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t global_work_size[3]
     * }
     */
    public static void global_work_size(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, global_work_size$OFFSET, global_work_size$LAYOUT.byteSize());
    }

    private static long[] global_work_size$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * size_t global_work_size[3]
     * }
     */
    public static long[] global_work_size$dimensions() {
        return global_work_size$DIMS;
    }
    private static final VarHandle global_work_size$ELEM_HANDLE = global_work_size$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * size_t global_work_size[3]
     * }
     */
    public static long global_work_size(MemorySegment struct, long index0) {
        return (long)global_work_size$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * size_t global_work_size[3]
     * }
     */
    public static void global_work_size(MemorySegment struct, long index0, long fieldValue) {
        global_work_size$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout local_work_size$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("local_work_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t local_work_size[3]
     * }
     */
    public static final SequenceLayout local_work_size$layout() {
        return local_work_size$LAYOUT;
    }

    private static final long local_work_size$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t local_work_size[3]
     * }
     */
    public static final long local_work_size$offset() {
        return local_work_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t local_work_size[3]
     * }
     */
    public static MemorySegment local_work_size(MemorySegment struct) {
        return struct.asSlice(local_work_size$OFFSET, local_work_size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t local_work_size[3]
     * }
     */
    public static void local_work_size(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, local_work_size$OFFSET, local_work_size$LAYOUT.byteSize());
    }

    private static long[] local_work_size$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * size_t local_work_size[3]
     * }
     */
    public static long[] local_work_size$dimensions() {
        return local_work_size$DIMS;
    }
    private static final VarHandle local_work_size$ELEM_HANDLE = local_work_size$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * size_t local_work_size[3]
     * }
     */
    public static long local_work_size(MemorySegment struct, long index0) {
        return (long)local_work_size$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * size_t local_work_size[3]
     * }
     */
    public static void local_work_size(MemorySegment struct, long index0, long fieldValue) {
        local_work_size$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

