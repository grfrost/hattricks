// Generated by jextract

package opencl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct fsupplement {
 *     off_t fs_file_start;
 *     off_t fs_blob_start;
 *     size_t fs_blob_size;
 *     int fs_orig_fd;
 * }
 * }
 */
public class fsupplement {

    fsupplement() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        opencl_h.C_LONG_LONG.withName("fs_file_start"),
        opencl_h.C_LONG_LONG.withName("fs_blob_start"),
        opencl_h.C_LONG.withName("fs_blob_size"),
        opencl_h.C_INT.withName("fs_orig_fd"),
        MemoryLayout.paddingLayout(4)
    ).withName("fsupplement");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong fs_file_start$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fs_file_start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * off_t fs_file_start
     * }
     */
    public static final OfLong fs_file_start$layout() {
        return fs_file_start$LAYOUT;
    }

    private static final long fs_file_start$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * off_t fs_file_start
     * }
     */
    public static final long fs_file_start$offset() {
        return fs_file_start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * off_t fs_file_start
     * }
     */
    public static long fs_file_start(MemorySegment struct) {
        return struct.get(fs_file_start$LAYOUT, fs_file_start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * off_t fs_file_start
     * }
     */
    public static void fs_file_start(MemorySegment struct, long fieldValue) {
        struct.set(fs_file_start$LAYOUT, fs_file_start$OFFSET, fieldValue);
    }

    private static final OfLong fs_blob_start$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fs_blob_start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * off_t fs_blob_start
     * }
     */
    public static final OfLong fs_blob_start$layout() {
        return fs_blob_start$LAYOUT;
    }

    private static final long fs_blob_start$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * off_t fs_blob_start
     * }
     */
    public static final long fs_blob_start$offset() {
        return fs_blob_start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * off_t fs_blob_start
     * }
     */
    public static long fs_blob_start(MemorySegment struct) {
        return struct.get(fs_blob_start$LAYOUT, fs_blob_start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * off_t fs_blob_start
     * }
     */
    public static void fs_blob_start(MemorySegment struct, long fieldValue) {
        struct.set(fs_blob_start$LAYOUT, fs_blob_start$OFFSET, fieldValue);
    }

    private static final OfLong fs_blob_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fs_blob_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t fs_blob_size
     * }
     */
    public static final OfLong fs_blob_size$layout() {
        return fs_blob_size$LAYOUT;
    }

    private static final long fs_blob_size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t fs_blob_size
     * }
     */
    public static final long fs_blob_size$offset() {
        return fs_blob_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t fs_blob_size
     * }
     */
    public static long fs_blob_size(MemorySegment struct) {
        return struct.get(fs_blob_size$LAYOUT, fs_blob_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t fs_blob_size
     * }
     */
    public static void fs_blob_size(MemorySegment struct, long fieldValue) {
        struct.set(fs_blob_size$LAYOUT, fs_blob_size$OFFSET, fieldValue);
    }

    private static final OfInt fs_orig_fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fs_orig_fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fs_orig_fd
     * }
     */
    public static final OfInt fs_orig_fd$layout() {
        return fs_orig_fd$LAYOUT;
    }

    private static final long fs_orig_fd$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fs_orig_fd
     * }
     */
    public static final long fs_orig_fd$offset() {
        return fs_orig_fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fs_orig_fd
     * }
     */
    public static int fs_orig_fd(MemorySegment struct) {
        return struct.get(fs_orig_fd$LAYOUT, fs_orig_fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fs_orig_fd
     * }
     */
    public static void fs_orig_fd(MemorySegment struct, int fieldValue) {
        struct.set(fs_orig_fd$LAYOUT, fs_orig_fd$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

