// Generated by jextract

package opencl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct fgetsigsinfo {
 *     off_t fg_file_start;
 *     int fg_info_request;
 *     int fg_sig_is_platform;
 * }
 * }
 */
public class fgetsigsinfo {

    fgetsigsinfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        opencl_h.C_LONG_LONG.withName("fg_file_start"),
        opencl_h.C_INT.withName("fg_info_request"),
        opencl_h.C_INT.withName("fg_sig_is_platform")
    ).withName("fgetsigsinfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong fg_file_start$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fg_file_start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * off_t fg_file_start
     * }
     */
    public static final OfLong fg_file_start$layout() {
        return fg_file_start$LAYOUT;
    }

    private static final long fg_file_start$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * off_t fg_file_start
     * }
     */
    public static final long fg_file_start$offset() {
        return fg_file_start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * off_t fg_file_start
     * }
     */
    public static long fg_file_start(MemorySegment struct) {
        return struct.get(fg_file_start$LAYOUT, fg_file_start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * off_t fg_file_start
     * }
     */
    public static void fg_file_start(MemorySegment struct, long fieldValue) {
        struct.set(fg_file_start$LAYOUT, fg_file_start$OFFSET, fieldValue);
    }

    private static final OfInt fg_info_request$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fg_info_request"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fg_info_request
     * }
     */
    public static final OfInt fg_info_request$layout() {
        return fg_info_request$LAYOUT;
    }

    private static final long fg_info_request$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fg_info_request
     * }
     */
    public static final long fg_info_request$offset() {
        return fg_info_request$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fg_info_request
     * }
     */
    public static int fg_info_request(MemorySegment struct) {
        return struct.get(fg_info_request$LAYOUT, fg_info_request$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fg_info_request
     * }
     */
    public static void fg_info_request(MemorySegment struct, int fieldValue) {
        struct.set(fg_info_request$LAYOUT, fg_info_request$OFFSET, fieldValue);
    }

    private static final OfInt fg_sig_is_platform$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fg_sig_is_platform"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fg_sig_is_platform
     * }
     */
    public static final OfInt fg_sig_is_platform$layout() {
        return fg_sig_is_platform$LAYOUT;
    }

    private static final long fg_sig_is_platform$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fg_sig_is_platform
     * }
     */
    public static final long fg_sig_is_platform$offset() {
        return fg_sig_is_platform$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fg_sig_is_platform
     * }
     */
    public static int fg_sig_is_platform(MemorySegment struct) {
        return struct.get(fg_sig_is_platform$LAYOUT, fg_sig_is_platform$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fg_sig_is_platform
     * }
     */
    public static void fg_sig_is_platform(MemorySegment struct, int fieldValue) {
        struct.set(fg_sig_is_platform$LAYOUT, fg_sig_is_platform$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

