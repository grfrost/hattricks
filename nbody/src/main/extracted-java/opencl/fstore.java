// Generated by jextract

package opencl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct fstore {
 *     unsigned int fst_flags;
 *     int fst_posmode;
 *     off_t fst_offset;
 *     off_t fst_length;
 *     off_t fst_bytesalloc;
 * }
 * }
 */
public class fstore {

    fstore() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        opencl_h.C_INT.withName("fst_flags"),
        opencl_h.C_INT.withName("fst_posmode"),
        opencl_h.C_LONG_LONG.withName("fst_offset"),
        opencl_h.C_LONG_LONG.withName("fst_length"),
        opencl_h.C_LONG_LONG.withName("fst_bytesalloc")
    ).withName("fstore");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt fst_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fst_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int fst_flags
     * }
     */
    public static final OfInt fst_flags$layout() {
        return fst_flags$LAYOUT;
    }

    private static final long fst_flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int fst_flags
     * }
     */
    public static final long fst_flags$offset() {
        return fst_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int fst_flags
     * }
     */
    public static int fst_flags(MemorySegment struct) {
        return struct.get(fst_flags$LAYOUT, fst_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int fst_flags
     * }
     */
    public static void fst_flags(MemorySegment struct, int fieldValue) {
        struct.set(fst_flags$LAYOUT, fst_flags$OFFSET, fieldValue);
    }

    private static final OfInt fst_posmode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fst_posmode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fst_posmode
     * }
     */
    public static final OfInt fst_posmode$layout() {
        return fst_posmode$LAYOUT;
    }

    private static final long fst_posmode$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fst_posmode
     * }
     */
    public static final long fst_posmode$offset() {
        return fst_posmode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fst_posmode
     * }
     */
    public static int fst_posmode(MemorySegment struct) {
        return struct.get(fst_posmode$LAYOUT, fst_posmode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fst_posmode
     * }
     */
    public static void fst_posmode(MemorySegment struct, int fieldValue) {
        struct.set(fst_posmode$LAYOUT, fst_posmode$OFFSET, fieldValue);
    }

    private static final OfLong fst_offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fst_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * off_t fst_offset
     * }
     */
    public static final OfLong fst_offset$layout() {
        return fst_offset$LAYOUT;
    }

    private static final long fst_offset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * off_t fst_offset
     * }
     */
    public static final long fst_offset$offset() {
        return fst_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * off_t fst_offset
     * }
     */
    public static long fst_offset(MemorySegment struct) {
        return struct.get(fst_offset$LAYOUT, fst_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * off_t fst_offset
     * }
     */
    public static void fst_offset(MemorySegment struct, long fieldValue) {
        struct.set(fst_offset$LAYOUT, fst_offset$OFFSET, fieldValue);
    }

    private static final OfLong fst_length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fst_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * off_t fst_length
     * }
     */
    public static final OfLong fst_length$layout() {
        return fst_length$LAYOUT;
    }

    private static final long fst_length$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * off_t fst_length
     * }
     */
    public static final long fst_length$offset() {
        return fst_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * off_t fst_length
     * }
     */
    public static long fst_length(MemorySegment struct) {
        return struct.get(fst_length$LAYOUT, fst_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * off_t fst_length
     * }
     */
    public static void fst_length(MemorySegment struct, long fieldValue) {
        struct.set(fst_length$LAYOUT, fst_length$OFFSET, fieldValue);
    }

    private static final OfLong fst_bytesalloc$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fst_bytesalloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * off_t fst_bytesalloc
     * }
     */
    public static final OfLong fst_bytesalloc$layout() {
        return fst_bytesalloc$LAYOUT;
    }

    private static final long fst_bytesalloc$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * off_t fst_bytesalloc
     * }
     */
    public static final long fst_bytesalloc$offset() {
        return fst_bytesalloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * off_t fst_bytesalloc
     * }
     */
    public static long fst_bytesalloc(MemorySegment struct) {
        return struct.get(fst_bytesalloc$LAYOUT, fst_bytesalloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * off_t fst_bytesalloc
     * }
     */
    public static void fst_bytesalloc(MemorySegment struct, long fieldValue) {
        struct.set(fst_bytesalloc$LAYOUT, fst_bytesalloc$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

