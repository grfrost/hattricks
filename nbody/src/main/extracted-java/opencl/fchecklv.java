// Generated by jextract

package opencl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct fchecklv {
 *     off_t lv_file_start;
 *     size_t lv_error_message_size;
 *     void *lv_error_message;
 * }
 * }
 */
public class fchecklv {

    fchecklv() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        opencl_h.C_LONG_LONG.withName("lv_file_start"),
        opencl_h.C_LONG.withName("lv_error_message_size"),
        opencl_h.C_POINTER.withName("lv_error_message")
    ).withName("fchecklv");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong lv_file_start$LAYOUT = (OfLong)$LAYOUT.select(groupElement("lv_file_start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * off_t lv_file_start
     * }
     */
    public static final OfLong lv_file_start$layout() {
        return lv_file_start$LAYOUT;
    }

    private static final long lv_file_start$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * off_t lv_file_start
     * }
     */
    public static final long lv_file_start$offset() {
        return lv_file_start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * off_t lv_file_start
     * }
     */
    public static long lv_file_start(MemorySegment struct) {
        return struct.get(lv_file_start$LAYOUT, lv_file_start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * off_t lv_file_start
     * }
     */
    public static void lv_file_start(MemorySegment struct, long fieldValue) {
        struct.set(lv_file_start$LAYOUT, lv_file_start$OFFSET, fieldValue);
    }

    private static final OfLong lv_error_message_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("lv_error_message_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t lv_error_message_size
     * }
     */
    public static final OfLong lv_error_message_size$layout() {
        return lv_error_message_size$LAYOUT;
    }

    private static final long lv_error_message_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t lv_error_message_size
     * }
     */
    public static final long lv_error_message_size$offset() {
        return lv_error_message_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t lv_error_message_size
     * }
     */
    public static long lv_error_message_size(MemorySegment struct) {
        return struct.get(lv_error_message_size$LAYOUT, lv_error_message_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t lv_error_message_size
     * }
     */
    public static void lv_error_message_size(MemorySegment struct, long fieldValue) {
        struct.set(lv_error_message_size$LAYOUT, lv_error_message_size$OFFSET, fieldValue);
    }

    private static final AddressLayout lv_error_message$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lv_error_message"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *lv_error_message
     * }
     */
    public static final AddressLayout lv_error_message$layout() {
        return lv_error_message$LAYOUT;
    }

    private static final long lv_error_message$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *lv_error_message
     * }
     */
    public static final long lv_error_message$offset() {
        return lv_error_message$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *lv_error_message
     * }
     */
    public static MemorySegment lv_error_message(MemorySegment struct) {
        return struct.get(lv_error_message$LAYOUT, lv_error_message$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *lv_error_message
     * }
     */
    public static void lv_error_message(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lv_error_message$LAYOUT, lv_error_message$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

